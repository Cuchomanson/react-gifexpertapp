{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAkBhD,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,OAOd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCNlBG,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAEjC,OACI,yBAAKC,UAAU,0CACZ,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCLFK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAOR,GAFP,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAaZY,GAbY,4CAAH,sDCKPM,EAAU,SAAC,GAAmB,IAAhBb,EAAe,EAAfA,SAAe,ECCd,SAAEA,GAAe,IAAD,EACdpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAqBxC,OAbAC,qBAAW,WACPlB,EAAQC,GACHkB,MAAM,SAAAC,GAEHH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAKtB,CAACd,IAEGe,EDnB0BK,CAAapB,GAAjCW,EAHyB,EAG9BL,KAAaQ,EAHiB,EAGjBA,QAErB,OACI,oCACI,wBAAIlB,UAAU,qCAAsCI,GAElDc,GAAW,uBAAGlB,UAAU,oCAAb,cAEb,yBAAKA,UAAU,aAEPe,EAAOH,KAAI,SAAAa,GAAK,OACZ,kBAAC,EAAD,eACIC,IAAKD,EAAMX,IACPW,UElBnBE,EAAe,WAAM,MAIM3C,mBAAS,CAAC,cAJhB,mBAIvB4C,EAJuB,KAIX7C,EAJW,KAkB9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAEA,4BAEQ6C,EAAWhB,KAAK,SAAAR,GACZ,OAAO,kBAAC,EAAD,CAASsB,IAAKtB,EAAUA,SAAYA,U,MCvBnEyB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.7c9ea5ca.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => { //También se puede pner {props} y luego acceder a cada propiedad sin hacer destructuring\r\n \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue,...cats ]); //Aqui no tenemos acceso al anterior estado (listado de categorías), hay que ponerlo de esta forma. También podría pasarnos las categorias y añadirse todo aqui\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <input type=\"text\" value={inputValue} onChange={ handleInputChange }/>\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ( {title, url } ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    );\r\n};","\r\n//Como es una función asíncrona, no retorna directamente el array de gifs, sino una promesa con el array de gifs\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=2KK6DVa3ttmbkzqxuvm2vxemRqtt3C9e`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n};","//https://developers.giphy.com/docs/api/endpoint/#search\r\n//https://animate.style/\r\n\r\nimport React  from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport {useFetchGifs} from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ( { category }) => {\r\n    \r\n    //Usando nuestro custom Hook. Para renombrar el data como \"images\"\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(image => (\r\n                        <GifGridItem \r\n                            key={image.id} \r\n                            {...image}/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n// Un Hook no es nada mas que una función. Las diferencias con un componente son:\r\n// 1º) No se importa React\r\n// 2º) No se tiene porque retornar nada \r\n// 3º) Los Hooks también pueden tener estado\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //Sirve para ejecutar código solo bajo ciertas condiciones. Suele ser util cuando cambia el componente ya que éste se vuelve a ejecutar\r\n    // Es similar al ComponentDidMount(). Solo se ejecutará cuando el componente/hook es renderizado por primera vez\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n\r\n            });\r\n\r\n    }, [category]);  //Si la category cambia, ejecutará de nuevo esta función (Así también quitamos el warning)\r\n\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //Esto no se hace así a menos que el array nunca vaya a cambiar ya que no se pueden modificar constantes\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories('Batman'); // ** Asi no se agregan los nuevos elementos porque se esta rompiendo el estado anterior. Aqui ya no sería un arreglo sino un string\r\n    //     setCategories([...categories, 'Batman']); //Se utiliza el operador Spred, lo que hace es coger los elementos que ya estában y les agrega uno nuevo\r\n    //     setCategories(['Batman', ...categories]); //Batman aparecería el primero y el resto de elementos detrás\r\n\r\n    //     setCategories( cats => [...cats, 'Batman']); //También se puede hacer con una función de callback donde recibimos el ESTADO ANTERIOR\r\n    // }\r\n\r\n\r\n\r\n    //Para renderizar, se necesitan siempre método que retornen algo (por eso un bucle no funciona)\r\n    //Se pueden pasar funciones a otros componentes. En este caso es para añadir valores sobre el listado.\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => {\r\n                        return <GifGrid key={category} category = {category} />\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp'\n\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}